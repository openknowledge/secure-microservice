<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">

  <metadata name="de.openknowledge" value="Checkstyle"/>

  <property name="severity" value="error"/>

  <!-- 
    https://checkstyle.sourceforge.io/config_whitespace.html#FileTabCharacter
    Checks that there are no tab characters ('\t') in the source code. 
   -->
  <module name="FileTabCharacter"/>

  <!-- 
    https://checkstyle.org/config_misc.html#NewlineAtEndOfFile
    Checks whether files end with a line separator (default check all files)
  -->
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf"/>
  </module>

  <!--
    https://checkstyle.sourceforge.io/config_sizes.html#LineLength
    Checks for long lines.
  -->
  <module name="LineLength">
    <property name="severity" value="warning"/>
    <property name="ignorePattern" value="^ *\*"/>
    <property name="max" value="140"/>
  </module>

  <!-- THESE CONVENTIONS ARE STILL IN DISCUSSION -->

  <!-- 
    https://checkstyle.sourceforge.io/config_sizes.html#FileLength
    Checks for long source files. (default 2000 all files)
   -->
  <module name="FileLength">
    <property name="severity" value="warning"/>
    <property name="max" value="1500"/>
  </module>

  <!-- 
    https://checkstyle.org/config_regexp.html#RegexpSingleline
    A check for detecting single lines that match a supplied regular expression. Works with any file type.
   -->
  <module name="RegexpSingleline">
    <!-- . matches any character, so we need to
      escape it and use \. to match dots. -->
    <property name="severity" value="warning"/>
    <property name="id" value="sysout"/>
    <property name="format" value="System\.out\."/>
    <property name="message" value="Illegal use of System.out. - use a logger instead!"/>
  </module>

  <module name="RegexpSingleline">
    <!-- . matches any character, so we need to
      escape it and use \. to match dots. -->
    <property name="severity" value="warning"/>
    <property name="id" value="syserr"/>
    <property name="format" value="System\.err\."/>
    <property name="message" value="Illegal use of System.err. - use a logger instead!"/>
  </module>

  <module name="RegexpSingleline">
    <!-- . matches any character, so we need to
      escape it and use \. to match dots. -->
    <property name="severity" value="warning"/>
    <property name="id" value="stacktrace"/>
    <property name="format" value="\.printStackTrace\(\)"/>
    <property name="message" value="Illegal use of [exception].printStackTrace() - use a logger instead!"/>
  </module>

  <module name="RegexpSingleline">
    <property name="severity" value="warning"/>
    <property name="format" value="\s+$"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <!--
    https://checkstyle.org/config_misc.html#Translation
    A FileSetCheck that ensures the correct translation of code by checking property files for consistency regarding their keys.
    default fileExtensions *.properties   
  -->
  <module name="Translation">
    <property name="severity" value="warning"/>
  </module>

  <!-- THESE CONVENTIONS ARE STILL IN DISCUSSION - END -->

  <!-- 
    https://checkstyle.org/config_filters.html#SeverityMatchFilter
    Filter SeverityMatchFilter decides audit events according to the severity level of the event. 
    
    The following configuration fragment directs the Checker to not report audit events with severity level info
   -->
  <module name="SeverityMatchFilter">
    <property name="severity" value="info"/>
    <property name="acceptOnMatch" value="false"/>
  </module>

  <module name="TreeWalker">

    <property name="tabWidth" value="2"/>

    <!--
      https://checkstyle.org/config_annotation.html#AnnotationUseStyle
      This check controls the style with the usage of annotations. 
    -->
    <module name="AnnotationUseStyle">
      <property name="elementStyle" value="ignore"/>
      <property name="closingParens" value="never"/>
      <property name="trailingArrayComma" value="never"/>
    </module>
    
    <!--
      https://checkstyle.org/config_misc.html#ArrayTypeStyle 
      Checks the style of array type definitions.  (Java (int[] nums;) or C Style (String strings[];))
    -->
    <module name="ArrayTypeStyle"/>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_blocks.html#AvoidNestedBlocks
      Finds nested blocks, i.e. blocks that are used freely in the code.
    -->
    <module name="AvoidNestedBlocks"/>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_imports.html#AvoidStarImport
      Checks that there are no import statements that use the * notation. 
    -->
    <module name="AvoidStarImport"/>

    <!-- 
      https://checkstyle.sourceforge.io/config_metrics.html#BooleanExpressionComplexity
      Restrict the number of number of &&, ||, &, | and ^ in an expression. (Default 3)
    -->
    <module name="BooleanExpressionComplexity">
      <property name="severity" value="warning"/>
    </module>

    <!-- 
      https://checkstyle.org/config_naming.html#ConstantName
      Checks that constant names conform to a format specified by the format property. (Default "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$")
      > Numbers removed
    -->
    <module name="ConstantName">
      <property name="format" value="^[A-Z]+(_[A-Z]+)*$"/>
    </module>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_coding.html#CovariantEquals
      Checks that classes which define a covariant equals() method also override method equals(Object). 
      (Default max - the maximum threshold allowed - 10)
    -->
    <module name="CovariantEquals">
      <property name="severity" value="warning"/>
    </module>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_metrics.html#CyclomaticComplexity
      Checks cyclomatic complexity against a specified limit.
    -->
    <module name="CyclomaticComplexity">
      <property name="severity" value="warning"/>
    </module>

    <!-- 
      https://checkstyle.sourceforge.io/config_coding.html#DeclarationOrder
      Checks the order in which parts of the class or interface declaration are defined.
      
      1. Class (static) variables. First the public class variables, then protected, then package level (no access modifier), and then private.
      2. Instance variables. First the public class variables, then protected, then package level (no access modifier), and then private.
      3. Constructors
      4. Methods
    -->
    <module name="DeclarationOrder"/>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_coding.html#DefaultComesLast
      Check that the default is after all the cases in a switch statement.
    -->
    <module name="DefaultComesLast">
      <property name="severity" value="warning"/>
    </module>

    <!-- 
      https://checkstyle.sourceforge.io/config_blocks.html#EmptyBlock
      Checks for empty blocks. This check does not validate sequential blocks. 
    -->
    <module name="EmptyBlock">
      <property name="option" value="text"/>
      <property name="tokens" value="LITERAL_CATCH"/>
    </module>
    <module name="EmptyBlock">
      <property name="tokens"
                value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,LITERAL_WHILE,INSTANCE_INIT,STATIC_INIT"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#EmptyForInitializerPad
      Checks the padding of an empty for initializer; that is whether white space is required at an empty for initializer, or such white space is forbidden. 
      No check occurs if there is a line wrap at the initializer.
    -->
    <module name="EmptyForInitializerPad"/>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_whitespace.html#EmptyForIteratorPad
      hecks the padding of an empty for iterator; that is whether a white space is required at an empty for iterator, or such white spaces are forbidden.
      No check occurs if there is a line wrap at the iterator.
     -->
    <module name="EmptyForIteratorPad"/>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#EmptyStatement
      Detects empty statements (standalone {@code ";"} semicolon). Empty statements often introduce bugs that are hard to spot
    -->
    <module name="EmptyStatement"/>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#EqualsHashCode
      Checks that classes that either override equals() or hashCode() also overrides the other. 
    -->
    <module name="EqualsHashCode"/>
    <!-- <module name="FileContentsHolder"/> removed since 8.2 -->
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html?#FallThrough
      Checks for fall-through in switch statements. Finds locations where a case contains Java code but lacks a break, return, throw or continue statement. 
    -->
    <module name="FallThrough"/>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_design.html#FinalClass
      Checks that a class which has only private constructors is declared as final.
     -->
    <module name="FinalClass">
      <property name="severity" value="warning"/>
    </module>

    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#GenericWhitespace
      Checks that the whitespace around the Generic tokens (angle brackets) "<" and ">" are correct to the typical convention. The convention is not configurable. 
    -->
    <module name="GenericWhitespace"/>

    <!--
      https://checkstyle.sourceforge.io/config_coding.html#HiddenField
      Checks that a local variable or a parameter does not shadow a field that is defined in the same class.
    <module name="HiddenField">
      <property name="severity" value="warning"/>
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
      <property name="ignoreAbstractMethods" value="true"/>
    </module>
    -->

    <!--
      https://checkstyle.sourceforge.io/config_design.html#HideUtilityClassConstructor
      Makes sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor.
    -->
<!--     <module name="HideUtilityClassConstructor"/> -->

    <!--
      https://checkstyle.sourceforge.io/config_imports.html#IllegalImport
      Checks for imports from a set of illegal packages. By default, the check rejects all sun.* packages
    -->
    <module name="IllegalImport">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#IllegalInstantiation
      Checks for illegal instantiations where a factory method is preferred. 
    -->
    <module name="IllegalInstantiation">
      <property name="severity" value="warning"/>
      <property name="classes" value="java.lang.Boolean,java.lang.Integer,java.lang.Long"/>
    </module>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_coding.html#IllegalThrows
      This check can be used to ensure that types are not declared to be thrown
      (Default - Error, RuntimeException, Throwable, java.lang.Error, java.lang.RuntimeException, java.lang.Throwable)
     -->
    <module name="IllegalThrows">
      <property name="severity" value="warning"/>
    </module>
    
    
    <!--
      https://checkstyle.sourceforge.io/config_imports.html#ImportOrder
      Checks the ordering/grouping of imports
    -->
    <module name="ImportOrder">
      <!--<property name="severity" value="warning"/>-->
      <property name="groups" value="java,javax,org,de.loyaltyharbor"/>
      <property name="staticGroups" value="java,javax,org,de.loyaltyharbor"/>
      <property name="separated" value="true"/>
      <property name="separatedStaticGroups" value="true"/>
      <property name="option" value="top"/>
      <property name="sortStaticImportsAlphabetically" value="true"/>
    </module>
    
    <!--
      https://checkstyle.org/config_misc.html#Indentation
      Checks correct indentation of Java code. 
    -->
    <module name="Indentation">
      <property name="basicOffset" value="2"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="4"/>
      <property name="arrayInitIndent" value="0"/>
      <property name="lineWrappingIndentation" value="2"/>
      <property name="forceStrictCondition" value="false"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#InnerAssignment
      Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.
    -->
    <module name="InnerAssignment">
      <property name="severity" value="warning"/>
    </module>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_design.html#InnerTypeLast
      Check nested (inner) classes/interfaces are declared at the bottom of the class after all method and field declarations. 
    -->
    <module name="InnerTypeLast"/>
    
    <!-- 
      https://checkstyle.sourceforge.io/config_design.html#InterfaceIsType
      Implements Joshua Bloch, Effective Java, Item 17 - Use Interfaces only to define types.
      According to Bloch, an interface should describe a type. It is therefore inappropriate to define an interface that does not contain any methods but only constants.
    -->
    <module name="InterfaceIsType">
      <property name="severity" value="warning"/>
    </module>

    <!--
      https://checkstyle.sourceforge.io/config_blocks.html#LeftCurly
      Checks for the placement of left curly braces ('{') for code blocks. 
    -->
    <module name="LeftCurly"/>

    <!--
      https://checkstyle.org/config_naming.html#LocalFinalVariableName
      Checks that local final variable names conform to a format specified by the format property. 
      A catch parameter and resources in try statements are considered to be a local, final variables.
      (default - "^[a-z][a-zA-Z0-9]*$" - > Numbers removed)
    -->
    <module name="LocalFinalVariableName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    
    <!--
      https://checkstyle.org/config_naming.html#LocalVariableName
      Checks that local, non-final variable names conform to a format specified by the format property. 
      A catch parameter is considered to be a local variable. 
      (default - "^[a-z][a-zA-Z0-9]*$" - > Numbers removed)
    -->
    <module name="LocalVariableName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>

    <!--
      https://checkstyle.sourceforge.io/config_coding.html#MagicNumber
      Checks that there are no "magic numbers" where a magic number is a numeric literal that is not defined as a constant. 
      By default, -1, 0, 1, and 2 are not considered to be magic numbers.
    -->
    <module name="MagicNumber">
      <property name="severity" value="warning"/>
      <property name="ignoreNumbers" value="-1, 0, 1, 2"/>
      <property name="ignoreHashCodeMethod" value="true" />
      <property name="ignoreAnnotation" value="true" />
    </module>
    
    <!--
      https://checkstyle.org/config_naming.html#MemberName
      Checks that instance variable names conform to a format specified by the format property. 
      (default - "^[a-z][a-zA-Z0-9]*$" - > Numbers removed)
    -->
    <module name="MemberName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_sizes.html#MethodLength
      Checks for long methods and constructors. 
      (default - max 150)
    -->
    <module name="MethodLength">
      <property name="id" value="methodlength"/>
      <property name="countEmpty" value="false"/>
      <property name="max" value="60"/>
    </module>
    
    
    <!--
      https://checkstyle.org/config_naming.html#MethodName
      Checks that method names conform to a format specified by the format property. 
      (default - "^[a-z][a-zA-Z0-9]*$" - > Numbers removed)
    -->
    <module name="MethodName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#MethodParamPad
      Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; 
      and the left parenthesis of the parameter list.
    -->
    <module name="MethodParamPad"/>
    
    <!--
      https://checkstyle.org/config_annotation.html#MissingOverride
      Verifies that the @Override annotation is present when the @inheritDoc javadoc tag is present.
    -->
    <module name="MissingOverride">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#MissingSwitchDefault
      Checks that switch statement has a "default" clause. 
    -->
    <module name="MissingSwitchDefault">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.org/config_modifier.html#ModifierOrder
      Checks that the order of modifiers conforms to the suggestions in the Java Language specification.
    -->
    <module name="ModifierOrder"/>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#MultipleStringLiterals
      Checks for multiple occurrences of the same string literal within a single file.
      (default - allowedDuplicates 1)
    -->
    <module name="MultipleStringLiterals">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#MultipleVariableDeclarations
      Checks that each variable declaration is in its own statement and on its own line. 
    -->
    <module name="MultipleVariableDeclarations"/>

    <!--
      https://checkstyle.sourceforge.io/config_blocks.html#NeedBraces
      Checks for braces around code blocks. 
    -->
    <module name="NeedBraces"/>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#NestedForDepth
      Restricts nested for blocks to a specified depth (default = 1). 
    -->
    <module name="NestedForDepth">
      <property name="severity" value="warning"/>
      <property name="max" value="2"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#NestedIfDepth
      Restricts nested if-else blocks to a specified depth (default = 1). 
    -->
    <module name="NestedIfDepth">
      <property name="severity" value="warning"/>
      <property name="max" value="3"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#NestedTryDepth
      Restricts nested try blocks to a specified depth (default = 1). 
    -->
    <module name="NestedTryDepth">
      <property name="severity" value="warning"/>
      <property name="max" value="2"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#NoWhitespaceAfter
      Checks that there is no whitespace after a token. More specifically, it checks that it is not followed by whitespace, 
      or (if linebreaks are allowed) all characters on the line after are whitespace.
    -->
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#NoWhitespaceBefore
      Checks that there is no whitespace before a token. More specifically, it checks that it is not preceded with whitespace, 
      or (if linebreaks are allowed) all characters on the line before are whitespace
    -->
    <module name="NoWhitespaceBefore"/>

    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#OperatorWrap
      Checks the policy on how to wrap lines on operators. 
    -->
    <module name="OperatorWrap"/>

    <!--
      https://checkstyle.sourceforge.io/config_coding.html?#PackageDeclaration
      Ensures that a class has a package declaration, and (optionally) whether the package name matches the directory name for the source file. 
    -->
    <module name="PackageDeclaration"/>

    <!--
      https://checkstyle.org/config_naming.html#PackageName
      Checks that package names conform to a format specified by the format property
      (default - "^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$")
    -->
    <module name="PackageName">
      <property name="format" value="^[a-z0-9]+(\.[a-z0-9\_]+)+$"/>
    </module>
    
    <!--
      https://checkstyle.org/config_naming.html#ParameterName
      Checks that method parameter names conform to a format specified by the format property
      (default - "^[a-z][a-zA-Z0-9]*$" > no numbers)
    -->
    <module name="ParameterName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_sizes.html#ParameterNumber
      Checks the number of parameters of a method or constructor. 
      (default - max 7)
    -->
    <module name="ParameterNumber">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#ParenPad
      Checks the policy on the padding of parentheses; i.e. whether a space is required after a left parenthesis and before a right parenthesis, 
      or such spaces are forbidden.
      ...
      (default nospace)
    -->
    <module name="ParenPad"/>

    <!--
      https://checkstyle.sourceforge.io/config_imports.html#RedundantImport
      Checks for redundant import statements. An import statement is considered redundant if: 
      ...
    -->
    <module name="RedundantImport"/>
    
    <!--
      https://checkstyle.org/config_modifier.html#RedundantModifier
      Checks for redundant modifiers in
    -->
    <module name="RedundantModifier"/>
    <!--<module name="RedundantThrows"/> Removed since 6.2 -->
    
    <!--
      https://checkstyle.sourceforge.io/config_blocks.html#RightCurly
      Checks the placement of right curly braces ('}') for if-else, try-catch-finally blocks, while-loops, for-loops, method definitions, 
      class definitions, constructor definitions, instance and static initialization blocks.
    -->
    <module name="RightCurly"/>

    <!--
      https://checkstyle.sourceforge.io/config_coding.html#SimplifyBooleanExpression
      Checks for over-complicated boolean expressions. Currently finds code like if (b == true), b || true, !false, etc.
    -->
    <module name="SimplifyBooleanExpression">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#SimplifyBooleanReturn
      Checks for over-complicated boolean return statements. For example the following code 
    -->
    <module name="SimplifyBooleanReturn">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.org/config_naming.html#StaticVariableName
      Checks that {@code static}, non-{@code final} variable names conform to a format specified by the format property.
      (default - "^[a-z][a-zA-Z0-9]*$" - no numbers) 
    -->
    <module name="StaticVariableName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html#StringLiteralEquality
      Checks that string literals are not used with == or !=.
    -->
    <module name="StringLiteralEquality">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_coding.html?#SuperClone
      Checks that an overriding clone() method invokes super.clone(). 
      Does not check native methods, as they have no possible java defined implementation.
    -->
    <module name="SuperClone"/>
    
    <!--
      https://checkstyle.org/config_filters.html#SuppressionXpathSingleFilter
      Filter SuppressionXpathSingleFilter suppresses audit events for Checks violations in the specified file, class, checks, message, module id, and xpath.  
    -->
<!--     <module name="SuppressionXpathSingleFilter"> -->
<!--       <property name="files" value=".*Application\.java" /> -->
<!--       <property name="checks" value="HideUtilityClassConstructorCheck" /> -->
<!--     </module> -->
      
    <!--
      https://checkstyle.org/config_misc.html#TodoComment
      A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments.
      To check for other patterns in Java comments, set the format property. 
    -->
    <module name="TodoComment">
      <property name="severity" value="warning"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_misc.html#TrailingComment
      The check to ensure that requires that comments be the only thing on a line.
      
      > configure the check so it enforces only comment on a line: 
    -->
    <module name="TrailingComment" />
    
    <!--
      https://checkstyle.org/config_naming.html#TypeName
      Checks that type names for classes, interfaces, enums, and annotations conform to a format specified by the format property. 
      (default - "^[A-Z][a-zA-Z0-9]*$" > no numbers)
    -->
    <module name="TypeName">
      <property name="format" value="^([A-Z][A-Za-z]+)+$"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#TypecastParenPad
      Checks the policy on the padding of parentheses for typecasts. That is, whether a space is required 
      after a left parenthesis and before a right parenthesis, or such spaces are forbidden. 
    -->
    <module name="TypecastParenPad"/>
    
    <!--
      https://checkstyle.org/config_misc.html#UncommentedMain
      Checks for uncommented main() methods. 
    -->
    <module name="UncommentedMain">
      <property name="severity" value="warning"/>
      <property name="excludedClasses" value="\S*Application$"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_imports.html#UnusedImports
      Checks for unused import statements
    -->
    <module name="UnusedImports"/>
    
    <!--
      https://checkstyle.org/config_misc.html#UpperEll
      Checks that long constants are defined with an upper ell. That is 'L' and not 'l'.
    -->
    <module name="UpperEll"/>
    
    <!--
      https://checkstyle.sourceforge.io/config_design.html#VisibilityModifier
      Checks visibility of class members. Only static final, immutable or annotated by specified annotation members may be public; 
      other class members must be private unless the property protectedAllowed or packageAllowed is set.
    -->
    <module name="VisibilityModifier">
      <property name="severity" value="warning"/>
      <property name="packageAllowed" value="true"/>
      <property name="protectedAllowed" value="true"/>
    </module>

    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#WhitespaceAfter
      Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator. 
      Use Check EmptyForIteratorPad to validate empty for iterators. 
    -->
    <module name="WhitespaceAfter">
      <property name="tokens" value="COMMA, SEMI"/>
    </module>
    
    <!--
      https://checkstyle.sourceforge.io/config_whitespace.html#WhitespaceAround
      Checks that a token is surrounded by whitespace. Empty constructor, method, class, enum, interface, loop bodies (blocks), lambdas of the form 
      ...
    -->
    <module name="WhitespaceAround">
      <property name="tokens"
                value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
    </module>
  </module>
  
  
  <!-- ####################################################### -->
    
    
    <!-- 
    <module name="MissingDeprecated"/>
    
    <module name="JavadocType"/>
    
    <module name="TypecastParenPad">
      <property name="tokens" value="RPAREN,TYPECAST"/>
    </module>
    
    - no
    <module name="JavadocMethod">
      <property name="minLineCount" value="2"/>
      <property name="allowMissingThrowsTags" value="true"/>
      <property name="suppressLoadErrors" value="true"/>
    </module>

    
    - no > finalize is deprecated
    - Checks that an overriding finalize() method invokes super.finalize(). Does not check native methods, as they have no possible java defined implementation. 
    <module name="SuperFinalize"/>
    
    - maybe if we need it
    <module name="SuppressionCommentFilter"/>

    <module name="EmptyBlock">
      <property name="option" value="text"/>
      <property name="tokens" value="LITERAL_WHILE,LITERAL_TRY,LITERAL_CATCH,LITERAL_FINALLY,LITERAL_DO,LITERAL_IF,LITERAL_ELSE,LITERAL_FOR,INSTANCE_INIT,STATIC_INIT,LITERAL_SWITCH,LITERAL_SYNCHRONIZED"/>
    </module>
     -->
  
</module>
